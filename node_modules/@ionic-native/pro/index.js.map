{"version":3,"sources":["../../../src/@ionic-native/plugins/pro/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, CordovaCheck, CordovaInstance, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Information about the currently running app\n */\nexport interface AppInfo {\n  platform: string;\n  platformVersion: string;\n  version: string;\n  bundleName: string;\n  bundleVersion: string;\n}\n\n/**\n * Information about the current live update\n */\nexport interface DeployInfo {\n  deploy_uuid: string;\n  channel: string;\n  binary_version: string;\n}\n\n/**\n * Object for manually configuring deploy\n */\nexport interface DeployConfig {\n  appId?: string;\n  host?: string;\n  channel?: string;\n}\n\nexport type ProgressMessage = number | string;\n\n/**\n * @hidden\n */\nexport class ProDeploy {\n\n  constructor(private _objectInstance: any) { }\n\n  /**\n   * Re-initialize Deploy plugin with a new App ID and host.  Not used in most cases.\n   * @param config A valid Deploy config object\n   */\n  @CordovaInstance()\n  init(config: DeployConfig): Promise<void> { return; }\n\n  /**\n   * Check a channel for an available update\n   * @return {Promise<string>} Resolves with 'true' or 'false', or rejects with an error.\n   */\n  @CordovaInstance()\n  check(): Promise<string> { return; }\n\n  /**\n   * Download an available version\n   * @return {Observable<ProgressMessage>} Updates with percent completion, or errors with a message.\n   */\n  @CordovaInstance({\n    observable: true\n  })\n  download(): Observable<ProgressMessage> { return; }\n\n  /**\n   * Unzip the latest downloaded version\n   * @return {Observable<ProgressMessage>} Updates with percent completion, or errors with a message.\n   */\n  @CordovaInstance({\n    observable: true\n  })\n  extract(): Observable<ProgressMessage> { return; }\n\n  /**\n   * Reload app with the deployed version\n   */\n  @CordovaInstance()\n  redirect(): Promise<void> { return; }\n\n  /**\n   * Get info about the version running on the device\n   * @return {Promise<DeployInfo>} Information about the current version running on the app.\n   */\n  @CordovaInstance()\n  info(): Promise<DeployInfo> { return; }\n\n  /**\n   * List versions stored on the device\n   */\n  @CordovaInstance()\n  getVersions(): Promise<string[]> { return; }\n\n  /**\n   * Delete a version stored on the device by UUID\n   * @param version A version UUID\n   */\n  @CordovaInstance()\n  deleteVersion(version: string): Promise<void> { return; }\n}\n\n/**\n * @name Pro\n * @description\n * This plugin enables Ionic Pro services like live updates and error monitoring\n *\n * @usage\n * ```typescript\n * import { Pro, AppInfo, DeployInfo } from '@ionic-native/pro';\n *\n *\n * constructor(private pro: Pro) { }\n * \n * // Get app info\n * this.pro.getAppInfo().then((res: AppInfo) => {\n *   console.log(res)\n * })\n * \n * // Get live update info\n * this.pro.deploy.info().then((res: DeployInfo) => {\n *   console.log(res)\n * })\n * ``` \n */\n@Plugin({\n  pluginName: 'Pro',\n  plugin: 'cordova-plugin-ionic',\n  pluginRef: 'IonicCordova',\n  repo: 'https://github.com/ionic-team/cordova-plugin-ionic',\n  platforms: ['Android', 'iOS'],\n  install: 'ionic cordova plugin add cordova-plugin-ionic --save --variable APP_ID=\"XXXXXXXX\" --variable CHANNEL_NAME=\"Channel\"'\n})\n\nexport class Pro extends IonicNativePlugin {\n  _deploy: ProDeploy;\n\n  /**\n   * Ionic Pro Deploy .js API.\n   */\n  @CordovaCheck({ sync: true })\n  deploy(): ProDeploy {\n    if (this._deploy) {\n      return this._deploy;\n    } else {\n      this._deploy = new ProDeploy(Pro.getPlugin().deploy);\n      return this._deploy;\n    }\n  }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  enableCrashLogging(): Promise<any> { return; }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  checkForPendingCrash(): Promise<any> { return; }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  loadPendingCrash(): Promise<any> { return; }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  forceCrash(): Promise<any> { return; }\n\n  /**\n   * Get information about the currently running app\n   * @return {Promise<any>} Returns a promise that resolves with current app info\n   */\n  @Cordova()\n  getAppInfo(): Promise<AppInfo> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}